#!/usr/bin/env node

//------------------------------------------------------------------------------
// 
// module dependencies
// 
//------------------------------------------------------------------------------
var app = require('../app');
var debug = require('debug')('web-ide:server');
var http = require('http');
var fs = require('fs');


//------------------------------------------------------------------------------
// 
// get port from environment and store in Express
// 
//------------------------------------------------------------------------------
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


//------------------------------------------------------------------------------
// 
// create HTTP server
// 
//------------------------------------------------------------------------------
var server = http.createServer(app);
app.io.attach(server);


//------------------------------------------------------------------------------
// 
// listen on provided port, on all network interfaces
// 
//------------------------------------------------------------------------------
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//------------------------------------------------------------------------------
// 
// normalize a port into a number, string, or false
// 
//------------------------------------------------------------------------------
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;  // named pipe
  if (port >= 0) return port;   // port number
  return false;
}


//------------------------------------------------------------------------------
// 
// event listener for HTTPS server "error" event
// 
//------------------------------------------------------------------------------
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


//------------------------------------------------------------------------------
// 
// event listener for HTTPS server "listening" event
// 
//------------------------------------------------------------------------------
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
